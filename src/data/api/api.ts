// tslint:disable
/**
 * news-api
 * News API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 記事
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {number}
     * @memberof Article
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    crawledAt: string;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Article
     */
    tags: Array<Tag>;
    /**
     * 
     * @type {Site}
     * @memberof Article
     */
    site: Site;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    image?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Article>}
     * @memberof InlineResponse200
     */
    articles?: Array<Article>;
}
/**
 * 
 * @export
 * @interface InlineResponse500
 */
export interface InlineResponse500 {
    /**
     * 
     * @type {Array<Error>}
     * @memberof InlineResponse500
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 * 記事の掲載サイト
 * @export
 * @interface Site
 */
export interface Site {
    /**
     * 
     * @type {number}
     * @memberof Site
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Site
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Site
     */
    url: string;
}
/**
 * 記事に紐づくタグ
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    name: string;
}

/**
 * ArticleApi - axios parameter creator
 * @export
 */
export const ArticleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 記事一覧を取得
         * @summary Your GET endpoint
         * @param {number} [limit] 取得件数
         * @param {string} [tag] 取得対象のタグ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticles: async (limit?: number, tag?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/articles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticleApi - functional programming interface
 * @export
 */
export const ArticleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 記事一覧を取得
         * @summary Your GET endpoint
         * @param {number} [limit] 取得件数
         * @param {string} [tag] 取得対象のタグ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticles(limit?: number, tag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).getArticles(limit, tag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ArticleApi - factory interface
 * @export
 */
export const ArticleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 記事一覧を取得
         * @summary Your GET endpoint
         * @param {number} [limit] 取得件数
         * @param {string} [tag] 取得対象のタグ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticles(limit?: number, tag?: string, options?: any): AxiosPromise<InlineResponse200> {
            return ArticleApiFp(configuration).getArticles(limit, tag, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */
export class ArticleApi extends BaseAPI {
    /**
     * 記事一覧を取得
     * @summary Your GET endpoint
     * @param {number} [limit] 取得件数
     * @param {string} [tag] 取得対象のタグ名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public getArticles(limit?: number, tag?: string, options?: any) {
        return ArticleApiFp(this.configuration).getArticles(limit, tag, options).then((request) => request(this.axios, this.basePath));
    }

}


